"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.FakeDriver = void 0;

require("source-map-support/register");

var _2 = require("../..");

var _lodash = _interopRequireDefault(require("lodash"));

var _uuidJs = _interopRequireDefault(require("uuid-js"));

class FakeDriver extends _2.BaseDriver {
  constructor() {
    super();
    this.protocol = _2.PROTOCOLS.MJSONWP;
    this.sessionId = null;
    this.jwpProxyActive = false;
  }

  sessionExists(sessionId) {
    if (!sessionId) {
      return false;
    }

    return sessionId === this.sessionId;
  }

  driverForSession() {
    return this;
  }

  async createSession(desiredCapabilities, requiredCapabilities, capabilities) {
    this.sessionId = `fakeSession_${_uuidJs.default.create().hex}`;

    if (capabilities) {
      return [this.sessionId, capabilities];
    } else {
      this.desiredCapabilities = desiredCapabilities;
      this.requiredCapabilities = requiredCapabilities || {};
      return [this.sessionId, _lodash.default.extend({}, desiredCapabilities, requiredCapabilities)];
    }
  }

  async executeCommand(cmd, ...args) {
    if (!this[cmd]) {
      throw new _2.errors.NotYetImplementedError();
    }

    if (cmd === 'createSession') {
      this.protocol = (0, _2.determineProtocol)(...args);
    }

    return await this[cmd](...args);
  }

  async deleteSession() {
    this.jwpProxyActive = false;
    this.sessionId = null;
  }

  async getStatus() {
    return "I'm fine";
  }

  async setUrl(url) {
    return `Navigated to: ${url}`;
  }

  async getUrl() {
    return 'http://foobar.com';
  }

  async back(sessionId) {
    return sessionId;
  }

  async forward() {}

  async refresh() {
    throw new Error('Too Fresh!');
  }

  async getSession() {
    throw new _2.errors.NoSuchDriverError();
  }

  async click(elementId, sessionId) {
    return [elementId, sessionId];
  }

  async implicitWait(ms) {
    return ms;
  }

  async clickCurrent(button) {
    return button;
  }

  async setNetworkConnection(type) {
    return type;
  }

  async moveTo(element, xOffset, yOffset) {
    return [element, xOffset, yOffset];
  }

  async getText() {
    return '';
  }

  async getAttribute(attr, elementId, sessionId) {
    return [attr, elementId, sessionId];
  }

  async setValue(value, elementId) {
    return [value, elementId];
  }

  async performTouch(...args) {
    return args;
  }

  async setFrame(frameId) {
    return frameId;
  }

  async removeApp(app) {
    return app;
  }

  async receiveAsyncResponse() {
    return {
      status: 13,
      value: 'Mishandled Driver Error'
    };
  }

  proxyActive() {
    return false;
  }

  getProxyAvoidList() {
    return [];
  }

  canProxy() {
    return false;
  }

}

exports.FakeDriver = FakeDriver;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
