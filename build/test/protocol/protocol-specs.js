"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

require("source-map-support/register");

require("../..");

var _chai = _interopRequireDefault(require("chai"));

var _sinon = _interopRequireDefault(require("sinon"));

var _chaiAsPromised = _interopRequireDefault(require("chai-as-promised"));

var _protocol = require("../../lib/protocol/protocol");

var _driver = _interopRequireDefault(require("../../lib/basedriver/driver"));

_chai.default.should();

_chai.default.use(_chaiAsPromised.default);

describe('Protocol', function () {
  describe('#driverShouldDoJwpProxy', function () {
    it('should not proxy if an image element is found in request url', function () {
      const d = new _driver.default();

      _sinon.default.stub(d, 'proxyActive').returns(true);

      _sinon.default.stub(d, 'proxyRouteIsAvoided').returns(false);

      const hasImageElements = [`/wd/hub/session/:sessionId/element/${_protocol.IMAGE_ELEMENT_PREFIX}bar`, `/wd/hub/session/:sessionId/element/${_protocol.IMAGE_ELEMENT_PREFIX}bar/click`, `/wd/hub/session/:sessionId/element/${_protocol.IMAGE_ELEMENT_PREFIX}bar/submit`, `/wd/hub/session/:sessionId/screenshot/${_protocol.IMAGE_ELEMENT_PREFIX}bar`];
      const noImageElements = [`/wd/hub/session/:sessionId/element/${_protocol.IMAGE_ELEMENT_PREFIX}`, `/wd/hub/session/:sessionId/screenshot/${_protocol.IMAGE_ELEMENT_PREFIX}`, `/wd/hub/session/:sessionId/element/bar${_protocol.IMAGE_ELEMENT_PREFIX}`, '/wd/hub/session/:sessionId/element/element123', '/wd/hub/session/:sessionId/title', `/wd/hub/session/:sessionId/notelement/${_protocol.IMAGE_ELEMENT_PREFIX}bar`];

      for (let testCase of hasImageElements) {
        const req = {
          body: {},
          params: {},
          originalUrl: testCase
        };
        (0, _protocol.driverShouldDoJwpProxy)(d, req, null).should.be.false;
      }

      for (let testCase of noImageElements) {
        const req = {
          body: {},
          params: {},
          originalUrl: testCase
        };
        (0, _protocol.driverShouldDoJwpProxy)(d, req, null).should.be.true;
      }
    });
    it('should not proxy if an image element is found in request body', function () {
      const d = new _driver.default();

      _sinon.default.stub(d, 'proxyActive').returns(true);

      _sinon.default.stub(d, 'proxyRouteIsAvoided').returns(false);

      const hasImageElements = [{
        [_protocol.W3C_ELEMENT_KEY]: `${_protocol.IMAGE_ELEMENT_PREFIX}bar`
      }, {
        [_protocol.W3C_ELEMENT_KEY]: `${_protocol.IMAGE_ELEMENT_PREFIX}foo`
      }, {
        [_protocol.MJSONWP_ELEMENT_KEY]: `${_protocol.IMAGE_ELEMENT_PREFIX}bar`
      }];
      const noImageElements = [{
        [_protocol.IMAGE_ELEMENT_PREFIX]: 'foo'
      }, {
        [_protocol.W3C_ELEMENT_KEY]: `${_protocol.IMAGE_ELEMENT_PREFIX}`
      }, {
        [_protocol.MJSONWP_ELEMENT_KEY]: `${_protocol.IMAGE_ELEMENT_PREFIX}`
      }, {
        foo: 'bar'
      }, {
        [_protocol.W3C_ELEMENT_KEY]: 'bar'
      }, {
        [_protocol.MJSONWP_ELEMENT_KEY]: 'bar'
      }, {
        foo: `${_protocol.IMAGE_ELEMENT_PREFIX}bar`
      }, {
        foo: `bar${_protocol.IMAGE_ELEMENT_PREFIX}`
      }, {
        [_protocol.W3C_ELEMENT_KEY]: `bar${_protocol.IMAGE_ELEMENT_PREFIX}`
      }, {
        [_protocol.MJSONWP_ELEMENT_KEY]: `bar${_protocol.IMAGE_ELEMENT_PREFIX}`
      }];

      for (let testCase of hasImageElements) {
        const req = {
          body: testCase,
          params: {}
        };
        (0, _protocol.driverShouldDoJwpProxy)(d, req, null).should.be.false;
      }

      for (let testCase of noImageElements) {
        const req = {
          body: testCase,
          params: {}
        };
        (0, _protocol.driverShouldDoJwpProxy)(d, req, null).should.be.true;
      }
    });
  });
});require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
